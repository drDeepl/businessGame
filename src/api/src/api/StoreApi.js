/**
 * NinjaExtraAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StoreProductKitOut from '../model/StoreProductKitOut';
import StoreProductOut from '../model/StoreProductOut';

/**
* Store service.
* @module api/StoreApi
* @version 1.0.0
*/
export default class StoreApi {

    /**
    * Constructs a new StoreApi. 
    * @alias module:api/StoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the call035cf791ControllerListProductKits operation.
     * @callback module:api/StoreApi~call035cf791ControllerListProductKitsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoreProductKitOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Product Kits
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/StoreApi~call035cf791ControllerListProductKitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoreProductKitOut>}
     */
    call035cf791ControllerListProductKits(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling call035cf791ControllerListProductKits");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoreProductKitOut];
      return this.apiClient.callApi(
        '/api/store/{team_id}/product-kits/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call33b90ccbControllerListProducts operation.
     * @callback module:api/StoreApi~call33b90ccbControllerListProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoreProductOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Products
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/StoreApi~call33b90ccbControllerListProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoreProductOut>}
     */
    call33b90ccbControllerListProducts(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling call33b90ccbControllerListProducts");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StoreProductOut];
      return this.apiClient.callApi(
        '/api/store/{team_id}/products/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
