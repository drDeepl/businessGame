/**
 * NinjaExtraAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Detail from '../model/Detail';
import ProductKitIn from '../model/ProductKitIn';
import ProductKitOut from '../model/ProductKitOut';

/**
* ProductKit service.
* @module api/ProductKitApi
* @version 1.0.0
*/
export default class ProductKitApi {

    /**
    * Constructs a new ProductKitApi. 
    * @alias module:api/ProductKitApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the c3f01b8cControllerCreateProductKit operation.
     * @callback module:api/ProductKitApi~c3f01b8cControllerCreateProductKitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductKitOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product Kit
     * @param {module:model/ProductKitIn} productKitIn 
     * @param {module:api/ProductKitApi~c3f01b8cControllerCreateProductKitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductKitOut}
     */
    c3f01b8cControllerCreateProductKit(productKitIn, callback) {
      let postBody = productKitIn;
      // verify the required parameter 'productKitIn' is set
      if (productKitIn === undefined || productKitIn === null) {
        throw new Error("Missing the required parameter 'productKitIn' when calling c3f01b8cControllerCreateProductKit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductKitOut;
      return this.apiClient.callApi(
        '/api/product-kits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call38bfc4f6ControllerGetProductKit operation.
     * @callback module:api/ProductKitApi~call38bfc4f6ControllerGetProductKitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductKitOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Kit
     * @param {Number} productKitId 
     * @param {module:api/ProductKitApi~call38bfc4f6ControllerGetProductKitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductKitOut}
     */
    call38bfc4f6ControllerGetProductKit(productKitId, callback) {
      let postBody = null;
      // verify the required parameter 'productKitId' is set
      if (productKitId === undefined || productKitId === null) {
        throw new Error("Missing the required parameter 'productKitId' when calling call38bfc4f6ControllerGetProductKit");
      }

      let pathParams = {
        'product_kit_id': productKitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductKitOut;
      return this.apiClient.callApi(
        '/api/product-kits/{product_kit_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call8676a9e8ControllerListProducts operation.
     * @callback module:api/ProductKitApi~call8676a9e8ControllerListProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductKitOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Products
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/ProductKitApi~call8676a9e8ControllerListProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductKitOut>}
     */
    call8676a9e8ControllerListProducts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductKitOut];
      return this.apiClient.callApi(
        '/api/product-kits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call9f0c7136ControllerDeleteProduct operation.
     * @callback module:api/ProductKitApi~call9f0c7136ControllerDeleteProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Detail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Product
     * @param {Number} productId 
     * @param {module:api/ProductKitApi~call9f0c7136ControllerDeleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Detail}
     */
    call9f0c7136ControllerDeleteProduct(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling call9f0c7136ControllerDeleteProduct");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Detail;
      return this.apiClient.callApi(
        '/api/product-kits/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the febd979bControllerUpdateProductKit operation.
     * @callback module:api/ProductKitApi~febd979bControllerUpdateProductKitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductKitOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Product Kit
     * @param {Number} productKitId 
     * @param {module:model/ProductKitIn} productKitIn 
     * @param {module:api/ProductKitApi~febd979bControllerUpdateProductKitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductKitOut}
     */
    febd979bControllerUpdateProductKit(productKitId, productKitIn, callback) {
      let postBody = productKitIn;
      // verify the required parameter 'productKitId' is set
      if (productKitId === undefined || productKitId === null) {
        throw new Error("Missing the required parameter 'productKitId' when calling febd979bControllerUpdateProductKit");
      }
      // verify the required parameter 'productKitIn' is set
      if (productKitIn === undefined || productKitIn === null) {
        throw new Error("Missing the required parameter 'productKitIn' when calling febd979bControllerUpdateProductKit");
      }

      let pathParams = {
        'product_kit_id': productKitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductKitOut;
      return this.apiClient.callApi(
        '/api/product-kits/{product_kit_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
