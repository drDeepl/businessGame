/**
 * NinjaExtraAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TokenObtainPairOutput from '../model/TokenObtainPairOutput';
import TokenObtainPairSerializer from '../model/TokenObtainPairSerializer';
import TokenRefreshSchema from '../model/TokenRefreshSchema';
import TokenRefreshSerializer from '../model/TokenRefreshSerializer';
import TokenVerifySerializer from '../model/TokenVerifySerializer';

/**
* Token service.
* @module api/TokenApi
* @version 1.0.0
*/
export default class TokenApi {

    /**
    * Constructs a new TokenApi. 
    * @alias module:api/TokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the b1d3edf3ControllerObtainToken operation.
     * @callback module:api/TokenApi~b1d3edf3ControllerObtainTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenObtainPairOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain Token
     * @param {module:model/TokenObtainPairSerializer} tokenObtainPairSerializer 
     * @param {module:api/TokenApi~b1d3edf3ControllerObtainTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenObtainPairOutput}
     */
    b1d3edf3ControllerObtainToken(tokenObtainPairSerializer, callback) {
      let postBody = tokenObtainPairSerializer;
      // verify the required parameter 'tokenObtainPairSerializer' is set
      if (tokenObtainPairSerializer === undefined || tokenObtainPairSerializer === null) {
        throw new Error("Missing the required parameter 'tokenObtainPairSerializer' when calling b1d3edf3ControllerObtainToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenObtainPairOutput;
      return this.apiClient.callApi(
        '/api/token/pair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call43913da6ControllerRefreshToken operation.
     * @callback module:api/TokenApi~call43913da6ControllerRefreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenRefreshSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Token
     * @param {module:model/TokenRefreshSchema} tokenRefreshSchema 
     * @param {module:api/TokenApi~call43913da6ControllerRefreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenRefreshSerializer}
     */
    call43913da6ControllerRefreshToken(tokenRefreshSchema, callback) {
      let postBody = tokenRefreshSchema;
      // verify the required parameter 'tokenRefreshSchema' is set
      if (tokenRefreshSchema === undefined || tokenRefreshSchema === null) {
        throw new Error("Missing the required parameter 'tokenRefreshSchema' when calling call43913da6ControllerRefreshToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenRefreshSerializer;
      return this.apiClient.callApi(
        '/api/token/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the e536d212ControllerVerifyToken operation.
     * @callback module:api/TokenApi~e536d212ControllerVerifyTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Token
     * @param {module:model/TokenVerifySerializer} tokenVerifySerializer 
     * @param {module:api/TokenApi~e536d212ControllerVerifyTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    e536d212ControllerVerifyToken(tokenVerifySerializer, callback) {
      let postBody = tokenVerifySerializer;
      // verify the required parameter 'tokenVerifySerializer' is set
      if (tokenVerifySerializer === undefined || tokenVerifySerializer === null) {
        throw new Error("Missing the required parameter 'tokenVerifySerializer' when calling e536d212ControllerVerifyToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/token/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
