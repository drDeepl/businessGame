/**
 * NinjaExtraAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TransactionOut from '../model/TransactionOut';

/**
* Transaction service.
* @module api/TransactionApi
* @version 1.0.0
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:api/TransactionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the call0f7e4f89ControllerListTransactions operation.
     * @callback module:api/TransactionApi~call0f7e4f89ControllerListTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/TransactionApi~call0f7e4f89ControllerListTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionOut>}
     */
    call0f7e4f89ControllerListTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionOut];
      return this.apiClient.callApi(
        '/api/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call311415a7ControllerGetTransaction operation.
     * @callback module:api/TransactionApi~call311415a7ControllerGetTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction
     * @param {Number} transactionId 
     * @param {module:api/TransactionApi~call311415a7ControllerGetTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionOut}
     */
    call311415a7ControllerGetTransaction(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling call311415a7ControllerGetTransaction");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionOut;
      return this.apiClient.callApi(
        '/api/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
