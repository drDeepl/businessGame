/**
 * NinjaExtraAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountAmountSchema from '../model/AccountAmountSchema';
import AccountOut from '../model/AccountOut';
import TransactionOut from '../model/TransactionOut';
import TransferSchema from '../model/TransferSchema';

/**
* Account service.
* @module api/AccountApi
* @version 1.0.0
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the c73717b5ControllerEmit operation.
     * @callback module:api/AccountApi~c73717b5ControllerEmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Emit
     * @param {module:model/AccountAmountSchema} accountAmountSchema 
     * @param {module:api/AccountApi~c73717b5ControllerEmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionOut}
     */
    c73717b5ControllerEmit(accountAmountSchema, callback) {
      let postBody = accountAmountSchema;
      // verify the required parameter 'accountAmountSchema' is set
      if (accountAmountSchema === undefined || accountAmountSchema === null) {
        throw new Error("Missing the required parameter 'accountAmountSchema' when calling c73717b5ControllerEmit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionOut;
      return this.apiClient.callApi(
        '/api/accounts/emit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4d9499b3ControllerTransfer operation.
     * @callback module:api/AccountApi~call4d9499b3ControllerTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer
     * @param {module:model/TransferSchema} transferSchema 
     * @param {module:api/AccountApi~call4d9499b3ControllerTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionOut}
     */
    call4d9499b3ControllerTransfer(transferSchema, callback) {
      let postBody = transferSchema;
      // verify the required parameter 'transferSchema' is set
      if (transferSchema === undefined || transferSchema === null) {
        throw new Error("Missing the required parameter 'transferSchema' when calling call4d9499b3ControllerTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionOut;
      return this.apiClient.callApi(
        '/api/account/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call7f3bcda1ControllerListAccounts operation.
     * @callback module:api/AccountApi~call7f3bcda1ControllerListAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Accounts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/AccountApi~call7f3bcda1ControllerListAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountOut>}
     */
    call7f3bcda1ControllerListAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountOut];
      return this.apiClient.callApi(
        '/api/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call8fe62cb0ControllerAbsorb operation.
     * @callback module:api/AccountApi~call8fe62cb0ControllerAbsorbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Absorb
     * @param {module:model/AccountAmountSchema} accountAmountSchema 
     * @param {module:api/AccountApi~call8fe62cb0ControllerAbsorbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionOut}
     */
    call8fe62cb0ControllerAbsorb(accountAmountSchema, callback) {
      let postBody = accountAmountSchema;
      // verify the required parameter 'accountAmountSchema' is set
      if (accountAmountSchema === undefined || accountAmountSchema === null) {
        throw new Error("Missing the required parameter 'accountAmountSchema' when calling call8fe62cb0ControllerAbsorb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionOut;
      return this.apiClient.callApi(
        '/api/accounts/absorb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dfd80334ControllerGetTransactions operation.
     * @callback module:api/AccountApi~dfd80334ControllerGetTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transactions
     * @param {Number} accountId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/AccountApi~dfd80334ControllerGetTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionOut>}
     */
    dfd80334ControllerGetTransactions(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling dfd80334ControllerGetTransactions");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionOut];
      return this.apiClient.callApi(
        '/api/accounts/{account_id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fae330efControllerGetAccount operation.
     * @callback module:api/AccountApi~fae330efControllerGetAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account
     * @param {Number} accountId 
     * @param {module:api/AccountApi~fae330efControllerGetAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountOut}
     */
    fae330efControllerGetAccount(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling fae330efControllerGetAccount");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountOut;
      return this.apiClient.callApi(
        '/api/accounts/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
