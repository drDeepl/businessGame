/**
 * NinjaExtraAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUserSchema from '../model/CreateUserSchema';
import Detail from '../model/Detail';
import UpdateUserSchema from '../model/UpdateUserSchema';
import UserOut from '../model/UserOut';

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the a5c0815eControllerDeleteUser operation.
     * @callback module:api/UserApi~a5c0815eControllerDeleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Detail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * @param {Number} userId 
     * @param {module:api/UserApi~a5c0815eControllerDeleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Detail}
     */
    a5c0815eControllerDeleteUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling a5c0815eControllerDeleteUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Detail;
      return this.apiClient.callApi(
        '/api/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the a656624bControllerListUsers operation.
     * @callback module:api/UserApi~a656624bControllerListUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/UserApi~a656624bControllerListUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserOut>}
     */
    a656624bControllerListUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserOut];
      return this.apiClient.callApi(
        '/api/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call0d96825aControllerUpdateUser operation.
     * @callback module:api/UserApi~call0d96825aControllerUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * @param {Number} userId 
     * @param {module:model/UpdateUserSchema} updateUserSchema 
     * @param {module:api/UserApi~call0d96825aControllerUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOut}
     */
    call0d96825aControllerUpdateUser(userId, updateUserSchema, callback) {
      let postBody = updateUserSchema;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling call0d96825aControllerUpdateUser");
      }
      // verify the required parameter 'updateUserSchema' is set
      if (updateUserSchema === undefined || updateUserSchema === null) {
        throw new Error("Missing the required parameter 'updateUserSchema' when calling call0d96825aControllerUpdateUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserOut;
      return this.apiClient.callApi(
        '/api/users/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call1450291dControllerGetUser operation.
     * @callback module:api/UserApi~call1450291dControllerGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * @param {Number} userId 
     * @param {module:api/UserApi~call1450291dControllerGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOut}
     */
    call1450291dControllerGetUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling call1450291dControllerGetUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserOut;
      return this.apiClient.callApi(
        '/api/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call4524bbb8ControllerGetRoles operation.
     * @callback module:api/UserApi~call4524bbb8ControllerGetRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Roles
     * @param {module:api/UserApi~call4524bbb8ControllerGetRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    call4524bbb8ControllerGetRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cbe3087aControllerCreateUser operation.
     * @callback module:api/UserApi~cbe3087aControllerCreateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * @param {module:model/CreateUserSchema} createUserSchema 
     * @param {module:api/UserApi~cbe3087aControllerCreateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOut}
     */
    cbe3087aControllerCreateUser(createUserSchema, callback) {
      let postBody = createUserSchema;
      // verify the required parameter 'createUserSchema' is set
      if (createUserSchema === undefined || createUserSchema === null) {
        throw new Error("Missing the required parameter 'createUserSchema' when calling cbe3087aControllerCreateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserOut;
      return this.apiClient.callApi(
        '/api/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the d05706e5ControllerGetUserByName operation.
     * @callback module:api/UserApi~d05706e5ControllerGetUserByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User By Name
     * @param {String} username 
     * @param {module:api/UserApi~d05706e5ControllerGetUserByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOut}
     */
    d05706e5ControllerGetUserByName(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling d05706e5ControllerGetUserByName");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserOut;
      return this.apiClient.callApi(
        '/api/users/name/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
