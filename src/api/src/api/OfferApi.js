/**
 * NinjaExtraAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PurchaseDoneOut from '../model/PurchaseDoneOut';
import PurchaseOfferOut from '../model/PurchaseOfferOut';
import PurchaseOfferPlace from '../model/PurchaseOfferPlace';
import SaleDoneOut from '../model/SaleDoneOut';
import SaleOfferOut from '../model/SaleOfferOut';
import SaleOfferPlace from '../model/SaleOfferPlace';

/**
* Offer service.
* @module api/OfferApi
* @version 1.0.0
*/
export default class OfferApi {

    /**
    * Constructs a new OfferApi. 
    * @alias module:api/OfferApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bc1917a1ControllerListOffers operation.
     * @callback module:api/OfferApi~bc1917a1ControllerListOffersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PurchaseOfferOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Offers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/OfferApi~bc1917a1ControllerListOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PurchaseOfferOut>}
     */
    bc1917a1ControllerListOffers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PurchaseOfferOut];
      return this.apiClient.callApi(
        '/api/offers/purchase/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call009c29e2ControllerListOffers operation.
     * @callback module:api/OfferApi~call009c29e2ControllerListOffersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SaleOfferOut>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Offers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit  (default to 100)
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/OfferApi~call009c29e2ControllerListOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SaleOfferOut>}
     */
    call009c29e2ControllerListOffers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SaleOfferOut];
      return this.apiClient.callApi(
        '/api/offers/sale/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call1e3aba20ControllerAcquire operation.
     * @callback module:api/OfferApi~call1e3aba20ControllerAcquireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseDoneOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acquire
     * @param {Number} offerId 
     * @param {module:api/OfferApi~call1e3aba20ControllerAcquireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseDoneOut}
     */
    call1e3aba20ControllerAcquire(offerId, callback) {
      let postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling call1e3aba20ControllerAcquire");
      }

      let pathParams = {
      };
      let queryParams = {
        'offer_id': offerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PurchaseDoneOut;
      return this.apiClient.callApi(
        '/api/offers/purchase/acquire', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call569d938cControllerPlaceOffer operation.
     * @callback module:api/OfferApi~call569d938cControllerPlaceOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOfferOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place Offer
     * @param {module:model/PurchaseOfferPlace} purchaseOfferPlace 
     * @param {module:api/OfferApi~call569d938cControllerPlaceOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOfferOut}
     */
    call569d938cControllerPlaceOffer(purchaseOfferPlace, callback) {
      let postBody = purchaseOfferPlace;
      // verify the required parameter 'purchaseOfferPlace' is set
      if (purchaseOfferPlace === undefined || purchaseOfferPlace === null) {
        throw new Error("Missing the required parameter 'purchaseOfferPlace' when calling call569d938cControllerPlaceOffer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOfferOut;
      return this.apiClient.callApi(
        '/api/offers/purchase/place', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call65bafa1bControllerPlaceOffer operation.
     * @callback module:api/OfferApi~call65bafa1bControllerPlaceOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaleOfferOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place Offer
     * @param {module:model/SaleOfferPlace} saleOfferPlace 
     * @param {module:api/OfferApi~call65bafa1bControllerPlaceOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaleOfferOut}
     */
    call65bafa1bControllerPlaceOffer(saleOfferPlace, callback) {
      let postBody = saleOfferPlace;
      // verify the required parameter 'saleOfferPlace' is set
      if (saleOfferPlace === undefined || saleOfferPlace === null) {
        throw new Error("Missing the required parameter 'saleOfferPlace' when calling call65bafa1bControllerPlaceOffer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaleOfferOut;
      return this.apiClient.callApi(
        '/api/offers/sale/place', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the call7c91fc4fControllerAcquire operation.
     * @callback module:api/OfferApi~call7c91fc4fControllerAcquireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SaleDoneOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acquire
     * @param {Number} offerId 
     * @param {module:api/OfferApi~call7c91fc4fControllerAcquireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaleDoneOut}
     */
    call7c91fc4fControllerAcquire(offerId, callback) {
      let postBody = null;
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling call7c91fc4fControllerAcquire");
      }

      let pathParams = {
      };
      let queryParams = {
        'offer_id': offerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SaleDoneOut;
      return this.apiClient.callApi(
        '/api/offers/sale/acquire', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
